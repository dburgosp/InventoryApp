package com.example.android.inventoryapp;

import android.app.LoaderManager;
import android.content.Intent;
import android.content.Loader;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;

import com.example.android.inventoryapp.data.InventoryContract.ProductsEntry;

import butterknife.BindView;

public class ProductActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<Cursor> {

    private static final int INVENTORY_LOADER = 0;          // Identifier for the loader.
    // Annotate fields with @BindView and views ID for Butter Knife to find and automatically cast
    // the corresponding views.
    @BindView(R.id.product_name_edit_text)
    EditText productNameEditText;
    @BindView(R.id.product_price_edit_text)
    EditText productPriceEditText;
    @BindView(R.id.product_description_edit_text)
    EditText productDescriptionEditText;
    @BindView(R.id.product_image_spinner)
    Spinner productImageSpinner;
    @BindView(R.id.product_supplier_edit_text)
    EditText productSupplierEditText;
    @BindView(R.id.product_email_supplier_edit_text)
    EditText productEmailSupplierEditText;
    @BindView(R.id.product_image)
    ImageView productImageView;
    private Uri currentProductUri = null;                   // URI of the current product, if exists one.
    private boolean unsavedChanges = false;                 // true if we are editing or creating a product.
    private int imageType = ProductsEntry.IMAGE_TYPE_NONE;  // Current image type selected on spinner.

    /**
     * Set unsavedChanges to true if we are editing or creating a product and there are unsaved
     * changes.
     */
    private View.OnTouchListener onTouchListener = new View.OnTouchListener() {
        /**
         * Called when a touch event is dispatched to a view. This allows listeners to get a chance
         * to respond before the target view.
         *
         * @param view is the view the touch event has been dispatched to.
         * @param motionEvent is the MotionEvent object containing full information about the event.
         * @return true if the listener has consumed the event, false otherwise.
         */
        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            unsavedChanges = true;
            return false;
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_product);

        // Get data from the intent used to launch this activity.
        getIntentData();

        // Setup OnTouchListeners to determine if there is unsaved data.
        setOnTouchListeners();

        // Setup image spinner.
        setImageSpinner();
    }

    /**
     * Specify the options menu for this activity.
     *
     * @param menu is the options menu in which the items are placed.
     * @return true for the menu to be displayed; if we return false it will not be shown.
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.edit_product_menu, menu);
        return true;
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        return null;
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
    }

    /**
     * Helper method to determine if we are inserting a new product or updating an existing one.
     */
    private void getIntentData() {
        Intent intent = getIntent();
        currentProductUri = intent.getData();
        if (currentProductUri == null) {
            // Data is null, so there's no URI to edit a product. We are inserting a new one.
            setTitle(getString(R.string.product_activity_insert_title));
            //invalidateOptionsMenu();
        } else {
            // The intent was created when clicking a list item, so we are editing an exiting
            // product.
            setTitle(getString(R.string.product_activity_update_title));
            getLoaderManager().initLoader(INVENTORY_LOADER, null, this);
        }
    }

    /**
     * Helper method to setup OnTouchListeners on all the input fields, in order to determine if
     * there is currently unsaved data.
     */
    private void setOnTouchListeners() {
        productNameEditText.setOnTouchListener(onTouchListener);
        productPriceEditText.setOnTouchListener(onTouchListener);
        productDescriptionEditText.setOnTouchListener(onTouchListener);
        productImageSpinner.setOnTouchListener(onTouchListener);
        productSupplierEditText.setOnTouchListener(onTouchListener);
        productEmailSupplierEditText.setOnTouchListener(onTouchListener);
    }

    private void setImageSpinner() {
        // Create adapter for spinner. The list options are from the String array it will use
        // the spinner will use the default layout
        ArrayAdapter genderSpinnerAdapter = ArrayAdapter.createFromResource(this, R.array.array_image_type, android.R.layout.simple_spinner_item);

        // Specify dropdown layout style - simple list view with 1 item per line
        genderSpinnerAdapter.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line);

        // Apply the adapter to the spinner
        productImageSpinner.setAdapter(genderSpinnerAdapter);

        // Set the integer mSelected to the constant values
        productImageSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String selection = (String) parent.getItemAtPosition(position);
                if (!TextUtils.isEmpty(selection)) {
                    if (selection.equals(getString(R.string.image_type_culture))) {
                        // The tourist product is a culture product.
                        imageType = ProductsEntry.IMAGE_TYPE_CULTURE;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_culture));
                    } else if (selection.equals(getString(R.string.image_type_hotels))) {
                        // The tourist product is a hotel.
                        imageType = ProductsEntry.IMAGE_TYPE_HOTELS;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_hotels));
                    } else if (selection.equals(getString(R.string.image_type_leisure))) {
                        // The tourist product is a leisure product.
                        imageType = ProductsEntry.IMAGE_TYPE_LEISURE;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_leisure));
                    } else if (selection.equals(getString(R.string.image_type_night))) {
                        // The tourist product is a night product.
                        imageType = ProductsEntry.IMAGE_TYPE_NIGHT;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_night));
                    } else if (selection.equals(getString(R.string.image_type_restaurants))) {
                        // The tourist product is a restaurant.
                        imageType = ProductsEntry.IMAGE_TYPE_RESTAURANTS;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_restaurants));
                    } else if (selection.equals(getString(R.string.image_type_shopping))) {
                        // The tourist product is a shopping product.
                        imageType = ProductsEntry.IMAGE_TYPE_SHOPPING;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_shopping));
                    } else if (selection.equals(getString(R.string.image_type_shows))) {
                        // The tourist product is a show.
                        imageType = ProductsEntry.IMAGE_TYPE_SHOWS;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_shows));
                    } else if (selection.equals(getString(R.string.image_type_transport))) {
                        // The tourist product is a transport product.
                        imageType = ProductsEntry.IMAGE_TYPE_TRANSPORT;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_transport));
                    } else if (selection.equals(getString(R.string.image_type_visits))) {
                        // The tourist product is a visit.
                        imageType = ProductsEntry.IMAGE_TYPE_VISITS;
                        productImageView.setImageDrawable(getDrawable(R.drawable.image_type_visits));
                    } else {
                        // Default.
                        imageType = ProductsEntry.IMAGE_TYPE_NONE;
                        //productImageView.setImageDrawable(getDrawable(R.drawable.image_type_none));
                    }
                }
            }

            // Because AdapterView is an abstract class, onNothingSelected must be defined.
            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                imageType = ProductsEntry.IMAGE_TYPE_NONE;
                //productImageView.setImageDrawable(getDrawable(R.drawable.image_type_none));
            }
        });
    }
}
